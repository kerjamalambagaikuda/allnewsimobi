// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kerjamalambagaikuda/allnewsimobi/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	db "github.com/kerjamalambagaikuda/allnewsimobi/db/sqlc"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method
func (m *MockStore) CreateCustomer(arg0 context.Context, arg1 db.CreateCustomerParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer
func (mr *MockStoreMockRecorder) CreateCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockStore)(nil).CreateCustomer), arg0, arg1)
}

// CreateLookup mocks base method
func (m *MockStore) CreateLookup(arg0 context.Context, arg1 db.CreateLookupParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLookup", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLookup indicates an expected call of CreateLookup
func (mr *MockStoreMockRecorder) CreateLookup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLookup", reflect.TypeOf((*MockStore)(nil).CreateLookup), arg0, arg1)
}

// CreateStatus mocks base method
func (m *MockStore) CreateStatus(arg0 context.Context, arg1 db.CreateStatusParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatus", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStatus indicates an expected call of CreateStatus
func (mr *MockStoreMockRecorder) CreateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatus", reflect.TypeOf((*MockStore)(nil).CreateStatus), arg0, arg1)
}

// DeleteCustomerById mocks base method
func (m *MockStore) DeleteCustomerById(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomerById indicates an expected call of DeleteCustomerById
func (mr *MockStoreMockRecorder) DeleteCustomerById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerById", reflect.TypeOf((*MockStore)(nil).DeleteCustomerById), arg0, arg1)
}

// DeleteLookupById mocks base method
func (m *MockStore) DeleteLookupById(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLookupById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLookupById indicates an expected call of DeleteLookupById
func (mr *MockStoreMockRecorder) DeleteLookupById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLookupById", reflect.TypeOf((*MockStore)(nil).DeleteLookupById), arg0, arg1)
}

// DeleteStatusById mocks base method
func (m *MockStore) DeleteStatusById(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatusById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatusById indicates an expected call of DeleteStatusById
func (mr *MockStoreMockRecorder) DeleteStatusById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatusById", reflect.TypeOf((*MockStore)(nil).DeleteStatusById), arg0, arg1)
}

// GetCustomerById mocks base method
func (m *MockStore) GetCustomerById(arg0 context.Context, arg1 int64) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerById", arg0, arg1)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerById indicates an expected call of GetCustomerById
func (mr *MockStoreMockRecorder) GetCustomerById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerById", reflect.TypeOf((*MockStore)(nil).GetCustomerById), arg0, arg1)
}

// GetCustomerByIdForUpdate mocks base method
func (m *MockStore) GetCustomerByIdForUpdate(arg0 context.Context, arg1 int64) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByIdForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByIdForUpdate indicates an expected call of GetCustomerByIdForUpdate
func (mr *MockStoreMockRecorder) GetCustomerByIdForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByIdForUpdate", reflect.TypeOf((*MockStore)(nil).GetCustomerByIdForUpdate), arg0, arg1)
}

// GetLookupById mocks base method
func (m *MockStore) GetLookupById(arg0 context.Context, arg1 int64) (db.Lookup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLookupById", arg0, arg1)
	ret0, _ := ret[0].(db.Lookup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLookupById indicates an expected call of GetLookupById
func (mr *MockStoreMockRecorder) GetLookupById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLookupById", reflect.TypeOf((*MockStore)(nil).GetLookupById), arg0, arg1)
}

// GetLookupByIdForUpdate mocks base method
func (m *MockStore) GetLookupByIdForUpdate(arg0 context.Context, arg1 int64) (db.Lookup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLookupByIdForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Lookup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLookupByIdForUpdate indicates an expected call of GetLookupByIdForUpdate
func (mr *MockStoreMockRecorder) GetLookupByIdForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLookupByIdForUpdate", reflect.TypeOf((*MockStore)(nil).GetLookupByIdForUpdate), arg0, arg1)
}

// GetStatusById mocks base method
func (m *MockStore) GetStatusById(arg0 context.Context, arg1 int64) (db.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusById", arg0, arg1)
	ret0, _ := ret[0].(db.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusById indicates an expected call of GetStatusById
func (mr *MockStoreMockRecorder) GetStatusById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusById", reflect.TypeOf((*MockStore)(nil).GetStatusById), arg0, arg1)
}

// GetStatusByIdForUpdate mocks base method
func (m *MockStore) GetStatusByIdForUpdate(arg0 context.Context, arg1 int64) (db.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusByIdForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusByIdForUpdate indicates an expected call of GetStatusByIdForUpdate
func (mr *MockStoreMockRecorder) GetStatusByIdForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusByIdForUpdate", reflect.TypeOf((*MockStore)(nil).GetStatusByIdForUpdate), arg0, arg1)
}

// ListCustomer mocks base method
func (m *MockStore) ListCustomer(arg0 context.Context) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomer", arg0)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomer indicates an expected call of ListCustomer
func (mr *MockStoreMockRecorder) ListCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomer", reflect.TypeOf((*MockStore)(nil).ListCustomer), arg0)
}

// ListLookup mocks base method
func (m *MockStore) ListLookup(arg0 context.Context) ([]db.Lookup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLookup", arg0)
	ret0, _ := ret[0].([]db.Lookup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLookup indicates an expected call of ListLookup
func (mr *MockStoreMockRecorder) ListLookup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLookup", reflect.TypeOf((*MockStore)(nil).ListLookup), arg0)
}

// ListStatus mocks base method
func (m *MockStore) ListStatus(arg0 context.Context) ([]db.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatus", arg0)
	ret0, _ := ret[0].([]db.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatus indicates an expected call of ListStatus
func (mr *MockStoreMockRecorder) ListStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatus", reflect.TypeOf((*MockStore)(nil).ListStatus), arg0)
}
