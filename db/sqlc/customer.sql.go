// Code generated by sqlc. DO NOT EDIT.
// source: customer.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCustomer = `-- name: CreateCustomer :execresult
INSERT INTO customer (
  cif_code,level,type,title,full_name,mothers_maiden,gender,birth_date,email,status,created_date,created_by,last_updated_date,last_updated_by,company_code,employers_code,profile_version,cif_code_nkyc
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateCustomerParams struct {
	CifCode         string         `json:"cif_code"`
	Level           int64          `json:"level"`
	Type            int64          `json:"type"`
	Title           sql.NullString `json:"title"`
	FullName        string         `json:"full_name"`
	MothersMaiden   string         `json:"mothers_maiden"`
	Gender          string         `json:"gender"`
	BirthDate       time.Time      `json:"birth_date"`
	Email           sql.NullString `json:"email"`
	Status          int64          `json:"status"`
	CreatedDate     time.Time      `json:"created_date"`
	CreatedBy       string         `json:"created_by"`
	LastUpdatedDate sql.NullTime   `json:"last_updated_date"`
	LastUpdatedBy   sql.NullString `json:"last_updated_by"`
	CompanyCode     sql.NullString `json:"company_code"`
	EmployersCode   sql.NullString `json:"employers_code"`
	ProfileVersion  sql.NullString `json:"profile_version"`
	CifCodeNkyc     sql.NullString `json:"cif_code_nkyc"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCustomer,
		arg.CifCode,
		arg.Level,
		arg.Type,
		arg.Title,
		arg.FullName,
		arg.MothersMaiden,
		arg.Gender,
		arg.BirthDate,
		arg.Email,
		arg.Status,
		arg.CreatedDate,
		arg.CreatedBy,
		arg.LastUpdatedDate,
		arg.LastUpdatedBy,
		arg.CompanyCode,
		arg.EmployersCode,
		arg.ProfileVersion,
		arg.CifCodeNkyc,
	)
}

const deleteCustomerById = `-- name: DeleteCustomerById :exec
DELETE FROM customer WHERE id = ?
`

func (q *Queries) DeleteCustomerById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomerById, id)
	return err
}

const getCustomerById = `-- name: GetCustomerById :one
SELECT id, cif_code, level, type, title, full_name, mothers_maiden, gender, birth_date, email, status, created_date, created_by, last_updated_date, last_updated_by, company_code, employers_code, profile_version, cif_code_nkyc FROM customer WHERE id = ? LIMIT 1
`

func (q *Queries) GetCustomerById(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerById, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.CifCode,
		&i.Level,
		&i.Type,
		&i.Title,
		&i.FullName,
		&i.MothersMaiden,
		&i.Gender,
		&i.BirthDate,
		&i.Email,
		&i.Status,
		&i.CreatedDate,
		&i.CreatedBy,
		&i.LastUpdatedDate,
		&i.LastUpdatedBy,
		&i.CompanyCode,
		&i.EmployersCode,
		&i.ProfileVersion,
		&i.CifCodeNkyc,
	)
	return i, err
}

const getCustomerByIdForUpdate = `-- name: GetCustomerByIdForUpdate :one
SELECT id, cif_code, level, type, title, full_name, mothers_maiden, gender, birth_date, email, status, created_date, created_by, last_updated_date, last_updated_by, company_code, employers_code, profile_version, cif_code_nkyc FROM customer WHERE id = ? LIMIT 1 FOR UPDATE
`

func (q *Queries) GetCustomerByIdForUpdate(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByIdForUpdate, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.CifCode,
		&i.Level,
		&i.Type,
		&i.Title,
		&i.FullName,
		&i.MothersMaiden,
		&i.Gender,
		&i.BirthDate,
		&i.Email,
		&i.Status,
		&i.CreatedDate,
		&i.CreatedBy,
		&i.LastUpdatedDate,
		&i.LastUpdatedBy,
		&i.CompanyCode,
		&i.EmployersCode,
		&i.ProfileVersion,
		&i.CifCodeNkyc,
	)
	return i, err
}

const listCustomer = `-- name: ListCustomer :many
SELECT id, cif_code, level, type, title, full_name, mothers_maiden, gender, birth_date, email, status, created_date, created_by, last_updated_date, last_updated_by, company_code, employers_code, profile_version, cif_code_nkyc FROM customer ORDER BY id
`

func (q *Queries) ListCustomer(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomer)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.CifCode,
			&i.Level,
			&i.Type,
			&i.Title,
			&i.FullName,
			&i.MothersMaiden,
			&i.Gender,
			&i.BirthDate,
			&i.Email,
			&i.Status,
			&i.CreatedDate,
			&i.CreatedBy,
			&i.LastUpdatedDate,
			&i.LastUpdatedBy,
			&i.CompanyCode,
			&i.EmployersCode,
			&i.ProfileVersion,
			&i.CifCodeNkyc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
