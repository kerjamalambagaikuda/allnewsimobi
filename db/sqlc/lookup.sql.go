// Code generated by sqlc. DO NOT EDIT.
// source: lookup.sql

package db

import (
	"context"
	"database/sql"
)

const createLookup = `-- name: CreateLookup :execresult
INSERT INTO lookup (
  type,code,name,priority,description,shortname,status,filter
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateLookupParams struct {
	Type        string         `json:"type"`
	Code        string         `json:"code"`
	Name        string         `json:"name"`
	Priority    sql.NullInt32  `json:"priority"`
	Description sql.NullString `json:"description"`
	Shortname   sql.NullString `json:"shortname"`
	Status      int64          `json:"status"`
	Filter      sql.NullString `json:"filter"`
}

func (q *Queries) CreateLookup(ctx context.Context, arg CreateLookupParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createLookup,
		arg.Type,
		arg.Code,
		arg.Name,
		arg.Priority,
		arg.Description,
		arg.Shortname,
		arg.Status,
		arg.Filter,
	)
}

const deleteLookupById = `-- name: DeleteLookupById :exec
DELETE FROM lookup WHERE id = ?
`

func (q *Queries) DeleteLookupById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLookupById, id)
	return err
}

const getLookupById = `-- name: GetLookupById :one
SELECT id, type, code, name, priority, description, shortname, status, filter FROM lookup WHERE id = ? LIMIT 1
`

func (q *Queries) GetLookupById(ctx context.Context, id int64) (Lookup, error) {
	row := q.db.QueryRowContext(ctx, getLookupById, id)
	var i Lookup
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Code,
		&i.Name,
		&i.Priority,
		&i.Description,
		&i.Shortname,
		&i.Status,
		&i.Filter,
	)
	return i, err
}

const getLookupByIdForUpdate = `-- name: GetLookupByIdForUpdate :one
SELECT id, type, code, name, priority, description, shortname, status, filter FROM lookup WHERE id = ? LIMIT 1 FOR UPDATE
`

func (q *Queries) GetLookupByIdForUpdate(ctx context.Context, id int64) (Lookup, error) {
	row := q.db.QueryRowContext(ctx, getLookupByIdForUpdate, id)
	var i Lookup
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Code,
		&i.Name,
		&i.Priority,
		&i.Description,
		&i.Shortname,
		&i.Status,
		&i.Filter,
	)
	return i, err
}

const listLookup = `-- name: ListLookup :many
SELECT id, type, code, name, priority, description, shortname, status, filter FROM lookup ORDER BY id
`

func (q *Queries) ListLookup(ctx context.Context) ([]Lookup, error) {
	rows, err := q.db.QueryContext(ctx, listLookup)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lookup{}
	for rows.Next() {
		var i Lookup
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Code,
			&i.Name,
			&i.Priority,
			&i.Description,
			&i.Shortname,
			&i.Status,
			&i.Filter,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
